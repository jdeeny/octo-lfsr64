### 64-bit LFSR-based PRNG
### Copyright (c) 2016 John Deeny
### Based on output generated by lfsr-generator by Wakabayashi Masaki
### lfsr-generator --config=galois --length=64 --taps=64,63,61,60 --shift-left


:alias LFSR_REG_TEMP v1           # Temporary register used by LFSR
: lfsr_reg_temp 0 0 0 0 0 0 0 0
: lfsr_state                      # 64-bit state, stored little-endian
: lfsr_state0 0xFF                # You should seed the state before using
: lfsr_state1 0xFF                # the PRNG
: lfsr_state2 0xFF
: lfsr_state3 0xFF
: lfsr_state4 0xFF
: lfsr_state5 0xFF
: lfsr_state6 0xFF
: lfsr_state7 0xFF
: lfsr_saved_0 0 0 0 0 0 0 0 0    # LFSR state can be saved and loaded. If you
: lfsr_saved_1 0 0 0 0 0 0 0 0    # need more, duplicate the save/load funcs below

# Advance the LFSR state
# No input or output parameters. Clobbers I, v0, and LFSR_REG_TEMP
: lfsr_advance
  # Using taps 64, 63, 61, 60
  # feedback = (1 << 0) ^ (1 << 1) ^ (1 << 3) ^ (1 << 4)
  #          = 00 00 00 00 00 00 00 1B
  # state = (state << 1) ^ (state[63] == 0 ? 0 : feedback)

  # Shift the state left 1 bit
  i := lfsr_state0    load v0             # Load byte 0 (least significant byte)
  v0 <<= v0                               # Shift left, vF = 1 if MSB set
  LFSR_REG_TEMP := vF                     # Save MSB
  i := lfsr_state0    save v0             # Save new byte 0

  load v0                                 # load byte 1, last save advanced I
  v0 <<= v0                               # Shift left
  v0 |= LFSR_REG_TEMP                     # OR in MSB from previous byte
  LFSR_REG_TEMP := vF                     # save MSB
  i := lfsr_state1    save v0             # Save new byte 1

  load v0    v0 <<= v0    v0 |= LFSR_REG_TEMP    LFSR_REG_TEMP := vF
  i := lfsr_state2    save v0             # Save new byte 2
  load v0    v0 <<= v0    v0 |= LFSR_REG_TEMP    LFSR_REG_TEMP := vF
  i := lfsr_state3    save v0             # Save new byte 3
  load v0    v0 <<= v0    v0 |= LFSR_REG_TEMP    LFSR_REG_TEMP := vF
  i := lfsr_state4    save v0             # Save new byte 4
  load v0    v0 <<= v0    v0 |= LFSR_REG_TEMP    LFSR_REG_TEMP := vF
  i := lfsr_state5    save v0             # Save new byte 5
  load v0    v0 <<= v0    v0 |= LFSR_REG_TEMP    LFSR_REG_TEMP := vF
  i := lfsr_state6    save v0             # Save new byte 6
  load v0    v0 <<= v0    v0 |= LFSR_REG_TEMP    LFSR_REG_TEMP := vF
  i := lfsr_state7    save v0             # Save new byte 7

  # If the MSB was set, XOR state with feedback
  if LFSR_REG_TEMP == 0 then jump skip_feedback_xor
    i := lfsr_state0    load v0
    LFSR_REG_TEMP := 0x1B    v0 ^= LFSR_REG_TEMP
    i := lfsr_state0    save v0           # Save updated byte 0
  : skip_feedback_xor
return

# XORs the bytes of state together to produce a single byte of output
# No input parameters, byte is output in v1. Clobbers v0 and I
: lfsr_collapse_output
  i := lfsr_state
  load v1       v1  ^= v0     # XOR first two bytes
  load v0       v1  ^= v0     # Load next byte and XOR
  load v0       v1  ^= v0     # Load next byte and XOR
  load v0       v1  ^= v0     # Load next byte and XOR
  load v0       v1  ^= v0     # Load next byte and XOR
  load v0       v1  ^= v0     # Load next byte and XOR
  load v0       v1  ^= v0     # Load next byte and XOR
return

# Copies the state of the LFSR into 'save location 0'
# No input parameters, no output parameters, Clobbers I
: lfsr_save_0
  i := lfsr_reg_temp    save v7   # Save registers
  i := lfsr_state       load v7   # Load LFSR state into registers
  i := lfsr_saved_0     save v7   # Store in save location
  i := lfsr_reg_temp    load v7   # Restore registers
return

# Copies the state of the LFSR into 'save location 1'
# No input parameters, no output parameters, Clobbers I
: lfsr_save_1
  i := lfsr_reg_temp    save v7   # Save registers
  i := lfsr_state       load v7   # Load LFSR state into registers
  i := lfsr_saved_1     save v7   # Store in save location
  i := lfsr_reg_temp    load v7   # Restore registers
return

# Copies the saved state from 'save location 0' to the LFSR's state
# No input parameters, no output parameters, Clobbers I
: lfsr_load_0
  i := lfsr_reg_temp    save v7   # Save registers
  i := lfsr_saved_0     load v7   # Load saved state into registers
  i := lfsr_state       save v7   # Save into main state
  i := lfsr_reg_temp    load v7   # Restore registers
return

# Copies the saved state from 'save location 1' to the LFSR's state
# No input parameters, no output parameters, Clobbers I
: lfsr_load_1
  i := lfsr_reg_temp    save v7   # Save registers
  i := lfsr_saved_1     load v7   # Load saved state into registers
  i := lfsr_state       save v7   # Save into main state
  i := lfsr_reg_temp    load v7   # Restore registers
return

### Test
# Reference data taken from C implementation using seed 0x4521126776111100
# 0xCE 0x87 0x0F 0x1E 0x3C 0x62 0xC4 0x93 0x27 0x4E 0x86 0x0D 0x1A 0x34 0x68
# 0xCA 0x95 0x2B 0x56 0xB6 0x6D 0xDA 0xAF 0x5F 0xBE 0x67 0xD4 0xA9 0x53 0xBC
: main
  # Seed the state of the RNG
  v0 := 0x00
  v1 := 0x11
  v2 := 0x11
  v3 := 0x76
  v4 := 0x67
  v5 := 0x12
  v6 := 0x21
  v7 := 0x45
  i := lfsr_state
  save v7

  lfsr_save_0

  # Generate 14 bytes of data, should be the first 14 reference bytes
  v8 := 0
  loop
    lfsr_advance
    lfsr_collapse_output
    :breakpoint lsfr_check
    v8 += 1
  if v8 != 15 then again

  # Save the state, then load the inital state, same 14 reference bytes
  lfsr_save_1
  lfsr_load_0
  v8 := 0
  loop
    lfsr_advance
    lfsr_collapse_output
    :breakpoint lsfr_check_2nd
    v8 += 1
  if v8 != 15 then again

  # Generate new data, should begin with the second set of 14 reference bytes
  lfsr_load_1
  loop
    lfsr_advance
    lfsr_collapse_output
    :breakpoint lsfr_check_last
  again

jump main
### End Test
